package com.yixianqian.entities;

import com.yixianqian.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.yixianqian.dao.CityDao;
import com.yixianqian.dao.CometentDao;
import com.yixianqian.dao.SchoolDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SCHOOL.
 */
public class School {

    private Long id;
    private String schoolName;
    private String schoolInfo;
    private long cometentID;
    private long cityID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SchoolDao myDao;

    private Cometent cometent;
    private Long cometent__resolvedKey;

    private City city;
    private Long city__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public School() {
    }

    public School(Long id) {
        this.id = id;
    }

    public School(Long id, String schoolName, String schoolInfo, long cometentID, long cityID) {
        this.id = id;
        this.schoolName = schoolName;
        this.schoolInfo = schoolInfo;
        this.cometentID = cometentID;
        this.cityID = cityID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSchoolDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSchoolName() {
        return schoolName;
    }

    public void setSchoolName(String schoolName) {
        this.schoolName = schoolName;
    }

    public String getSchoolInfo() {
        return schoolInfo;
    }

    public void setSchoolInfo(String schoolInfo) {
        this.schoolInfo = schoolInfo;
    }

    public long getCometentID() {
        return cometentID;
    }

    public void setCometentID(long cometentID) {
        this.cometentID = cometentID;
    }

    public long getCityID() {
        return cityID;
    }

    public void setCityID(long cityID) {
        this.cityID = cityID;
    }

    /** To-one relationship, resolved on first access. */
    public Cometent getCometent() {
        long __key = this.cometentID;
        if (cometent__resolvedKey == null || !cometent__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CometentDao targetDao = daoSession.getCometentDao();
            Cometent cometentNew = targetDao.load(__key);
            synchronized (this) {
                cometent = cometentNew;
            	cometent__resolvedKey = __key;
            }
        }
        return cometent;
    }

    public void setCometent(Cometent cometent) {
        if (cometent == null) {
            throw new DaoException("To-one property 'cometentID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.cometent = cometent;
            cometentID = cometent.getId();
            cometent__resolvedKey = cometentID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public City getCity() {
        long __key = this.cityID;
        if (city__resolvedKey == null || !city__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CityDao targetDao = daoSession.getCityDao();
            City cityNew = targetDao.load(__key);
            synchronized (this) {
                city = cityNew;
            	city__resolvedKey = __key;
            }
        }
        return city;
    }

    public void setCity(City city) {
        if (city == null) {
            throw new DaoException("To-one property 'cityID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.city = city;
            cityID = city.getId();
            city__resolvedKey = cityID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
