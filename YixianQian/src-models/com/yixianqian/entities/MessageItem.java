package com.yixianqian.entities;

import com.yixianqian.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.yixianqian.dao.ConversationDao;
import com.yixianqian.dao.MessageItemDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MESSAGE_ITEM.
 */
public class MessageItem {

    private Long id;
    private Integer messageType;
    private String msgContent;
    private Long time;
    private Boolean sendState;
    private Boolean isCome;
    private Boolean isNew;
    private long conversationID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MessageItemDao myDao;

    private Conversation conversation;
    private Long conversation__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MessageItem() {
    }

    public MessageItem(Long id) {
        this.id = id;
    }

    public MessageItem(Long id, Integer messageType, String msgContent, Long time, Boolean sendState, Boolean isCome, Boolean isNew, long conversationID) {
        this.id = id;
        this.messageType = messageType;
        this.msgContent = msgContent;
        this.time = time;
        this.sendState = sendState;
        this.isCome = isCome;
        this.isNew = isNew;
        this.conversationID = conversationID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMessageItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getMessageType() {
        return messageType;
    }

    public void setMessageType(Integer messageType) {
        this.messageType = messageType;
    }

    public String getMsgContent() {
        return msgContent;
    }

    public void setMsgContent(String msgContent) {
        this.msgContent = msgContent;
    }

    public Long getTime() {
        return time;
    }

    public void setTime(Long time) {
        this.time = time;
    }

    public Boolean getSendState() {
        return sendState;
    }

    public void setSendState(Boolean sendState) {
        this.sendState = sendState;
    }

    public Boolean getIsCome() {
        return isCome;
    }

    public void setIsCome(Boolean isCome) {
        this.isCome = isCome;
    }

    public Boolean getIsNew() {
        return isNew;
    }

    public void setIsNew(Boolean isNew) {
        this.isNew = isNew;
    }

    public long getConversationID() {
        return conversationID;
    }

    public void setConversationID(long conversationID) {
        this.conversationID = conversationID;
    }

    /** To-one relationship, resolved on first access. */
    public Conversation getConversation() {
        long __key = this.conversationID;
        if (conversation__resolvedKey == null || !conversation__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConversationDao targetDao = daoSession.getConversationDao();
            Conversation conversationNew = targetDao.load(__key);
            synchronized (this) {
                conversation = conversationNew;
            	conversation__resolvedKey = __key;
            }
        }
        return conversation;
    }

    public void setConversation(Conversation conversation) {
        if (conversation == null) {
            throw new DaoException("To-one property 'conversationID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.conversation = conversation;
            conversationID = conversation.getId();
            conversation__resolvedKey = conversationID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
