package com.yixianqian.entities;

import com.yixianqian.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.yixianqian.dao.SchoolDao;
import com.yixianqian.dao.TodayRecommendDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table TODAY_RECOMMEND.
 */
public class TodayRecommend {

    private Long id;
    private Integer userID;
    private String userName;
    private String userAvatar;
    private Integer userAge;
    private String date;
    private long schoolID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TodayRecommendDao myDao;

    private School school;
    private Long school__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TodayRecommend() {
    }

    public TodayRecommend(Long id) {
        this.id = id;
    }

    public TodayRecommend(Long id, Integer userID, String userName, String userAvatar, Integer userAge, String date, long schoolID) {
        this.id = id;
        this.userID = userID;
        this.userName = userName;
        this.userAvatar = userAvatar;
        this.userAge = userAge;
        this.date = date;
        this.schoolID = schoolID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTodayRecommendDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getUserID() {
        return userID;
    }

    public void setUserID(Integer userID) {
        this.userID = userID;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getUserAvatar() {
        return userAvatar;
    }

    public void setUserAvatar(String userAvatar) {
        this.userAvatar = userAvatar;
    }

    public Integer getUserAge() {
        return userAge;
    }

    public void setUserAge(Integer userAge) {
        this.userAge = userAge;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public long getSchoolID() {
        return schoolID;
    }

    public void setSchoolID(long schoolID) {
        this.schoolID = schoolID;
    }

    /** To-one relationship, resolved on first access. */
    public School getSchool() {
        long __key = this.schoolID;
        if (school__resolvedKey == null || !school__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SchoolDao targetDao = daoSession.getSchoolDao();
            School schoolNew = targetDao.load(__key);
            synchronized (this) {
                school = schoolNew;
            	school__resolvedKey = __key;
            }
        }
        return school;
    }

    public void setSchool(School school) {
        if (school == null) {
            throw new DaoException("To-one property 'schoolID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.school = school;
            schoolID = school.getId();
            school__resolvedKey = schoolID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
