package com.yixianqian.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.yixianqian.entities.Conversation;

import com.yixianqian.entities.MessageItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE_ITEM.
*/
public class MessageItemDao extends AbstractDao<MessageItem, Long> {

    public static final String TABLENAME = "MESSAGE_ITEM";

    /**
     * Properties of entity MessageItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageType = new Property(1, Integer.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property MsgContent = new Property(2, String.class, "msgContent", false, "MSG_CONTENT");
        public final static Property Time = new Property(3, Long.class, "time", false, "TIME");
        public final static Property SendState = new Property(4, Boolean.class, "sendState", false, "SEND_STATE");
        public final static Property IsCome = new Property(5, Boolean.class, "isCome", false, "IS_COME");
        public final static Property IsNew = new Property(6, Boolean.class, "isNew", false, "IS_NEW");
        public final static Property ConversationID = new Property(7, long.class, "conversationID", false, "CONVERSATION_ID");
    };

    private DaoSession daoSession;

    private Query<MessageItem> conversation_MessageItemListQuery;

    public MessageItemDao(DaoConfig config) {
        super(config);
    }
    
    public MessageItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MESSAGE_TYPE' INTEGER," + // 1: messageType
                "'MSG_CONTENT' TEXT," + // 2: msgContent
                "'TIME' INTEGER," + // 3: time
                "'SEND_STATE' INTEGER," + // 4: sendState
                "'IS_COME' INTEGER," + // 5: isCome
                "'IS_NEW' INTEGER," + // 6: isNew
                "'CONVERSATION_ID' INTEGER NOT NULL );"); // 7: conversationID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindLong(2, messageType);
        }
 
        String msgContent = entity.getMsgContent();
        if (msgContent != null) {
            stmt.bindString(3, msgContent);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        Boolean sendState = entity.getSendState();
        if (sendState != null) {
            stmt.bindLong(5, sendState ? 1l: 0l);
        }
 
        Boolean isCome = entity.getIsCome();
        if (isCome != null) {
            stmt.bindLong(6, isCome ? 1l: 0l);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(7, isNew ? 1l: 0l);
        }
        stmt.bindLong(8, entity.getConversationID());
    }

    @Override
    protected void attachEntity(MessageItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageItem readEntity(Cursor cursor, int offset) {
        MessageItem entity = new MessageItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // messageType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msgContent
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // sendState
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isCome
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isNew
            cursor.getLong(offset + 7) // conversationID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setMsgContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSendState(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setIsCome(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIsNew(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setConversationID(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MessageItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MessageItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "messageItemList" to-many relationship of Conversation. */
    public List<MessageItem> _queryConversation_MessageItemList(long conversationID) {
        synchronized (this) {
            if (conversation_MessageItemListQuery == null) {
                QueryBuilder<MessageItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ConversationID.eq(null));
                conversation_MessageItemListQuery = queryBuilder.build();
            }
        }
        Query<MessageItem> query = conversation_MessageItemListQuery.forCurrentThread();
        query.setParameter(0, conversationID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getConversationDao().getAllColumns());
            builder.append(" FROM MESSAGE_ITEM T");
            builder.append(" LEFT JOIN CONVERSATION T0 ON T.'CONVERSATION_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MessageItem loadCurrentDeep(Cursor cursor, boolean lock) {
        MessageItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Conversation conversation = loadCurrentOther(daoSession.getConversationDao(), cursor, offset);
         if(conversation != null) {
            entity.setConversation(conversation);
        }

        return entity;    
    }

    public MessageItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MessageItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MessageItem> list = new ArrayList<MessageItem>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MessageItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MessageItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
